我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。

如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。

现在我们有一个正整数 N, 计算从 1 到 N 中有多少个数 X 是好数？

class Solution(object):
    def rotatedDigits(self, N):
        """
        :type N: int
        :rtype: int
        """
        G = ['2','5','6','9']
        M = ['0','1','8']
        c = 0
        if N < 10:
            for i in range(1,N+1):
                if str(i) not in M and str(i) in G:
                    c += 1
        else:
            for i in range(10,N+1):
                l = len(str(i))
                r = 0
                if set(str(i)).issubset(M) is False: #判断是否每个位数都在['0','1','8']中
                    for j in str(i):
                        if j in G+M: 
                            r += 1
                    if r==l:
                        c+=1
            c += 4
        return c                        
